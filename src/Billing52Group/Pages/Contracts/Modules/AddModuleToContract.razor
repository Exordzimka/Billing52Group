@page "/contracts/{ContractId:int}/modules/add"
@using Billing52Group.Configuration
@using Billing52Group.Models
@using Microsoft.EntityFrameworkCore
@using Billing52Group.Accounting
@inject ApplicationDbContext Context
@inject NavigationManager NavigationManager
@attribute [Authorize]

@if (Modules != null)
{
    <h3>Create</h3>
    <div class="d-flex justify-content-center">
        <EditForm OnSubmit="@AddModule" Model="@ContractModule" class="form-group d-flex flex-column col-sm-3">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <label>
                Module
                <InputSelect id="selectedActivationTypeId" @bind-Value="moduleId" class="form-control">
                    @foreach (var module in Modules)
                    {
                        <option value="@module.Id">@module.Title</option>
                    }
                </InputSelect>
            </label>
            <input type="submit" class="form-control" />
        </EditForm>
    </div>
}




@code 
{
    [Parameter]
    public int ContractId { get; set; }

    private string moduleId;
    IEnumerable<Module> Modules;
    IEnumerable<Module> _modulesOnContract;
    IEnumerable<ContractModule> _contractModules;
    ContractModule ContractModule = new ContractModule();
    List<int> modulesOnContractId = new List<int>();
    protected override async Task OnInitializedAsync()
    {
        _contractModules = await Context.ContractModule.Where(module => module.ContractId == ContractId).ToListAsync();
        modulesOnContractId.AddRange(_contractModules.Select(module => module.Moduleid));
        _modulesOnContract = await Context.Module.Where(module => modulesOnContractId.Contains(module.Id)).ToListAsync();
        Modules = await Context.Module.Where(module => _modulesOnContract.Contains(module) == false).ToListAsync();
        if (Modules != null && Modules.Count() > 0)
        {
            moduleId = Modules.ElementAt(0).Id.ToString();
        }
    }

    async Task AddModule(EditContext editContext)
    {
        if (!editContext.Validate() ) return;
        if (moduleId != null && int.TryParse(moduleId, out _))
        {
            ContractModule.ContractId = ContractId;
            ContractModule.Moduleid = int.Parse(moduleId);
            await Context.AddAsync(ContractModule);
            await Context.SaveChangesAsync();
            await BalanceUpdater.UpdateBalance(ContractId);
            NavigationManager.NavigateTo($"/contracts/{ContractId}/modules");
        }
       
    }
}


