@page "/contracts/{ContractId:int}/payments"
@using Microsoft.EntityFrameworkCore
@using Billing52Group.Configuration
@using Billing52Group.Models
@inject ApplicationDbContext Context
@attribute [Authorize]
@inject IJSRuntime JsRuntime


@if (_contractPayments != null)
{
    <ContractComponent Id="@ContractId"></ContractComponent>
    <h1 align="center">Payments</h1>
    <div align="right">
        <a class="btn btn-primary " href="/contracts/@ContractId/payments/add">Add</a>    
    </div>
    
    <table class="table table-striped table-bordered table-hover">
        <thead>
        <tr align="center">
            <th>
                Id
            </th>
            <th>
                Sum
            </th>
            <th>
                Type Of Payment
            </th>
            <th>
                Date
            </th>
            <th>
                Comment
            </th>
        </tr>
        </thead>

        <tbody>
        @foreach (var contractPayment in _contractPayments)
        {
            <tr>
                <td>
                    @contractPayment.Id
                </td>
                <td>
                    @contractPayment.Summa
                </td>
                <td>
                    @contractPayment.PaymentType.Title
                </td>
                <td>
                    @contractPayment.Date.Value
                </td>
                <td>
                    <textarea rows="1" style="width: 300px" value="@contractPayment.Comment"
                    @onchange="@(e => { ChangeComment(contractPayment.Id, e.Value.ToString()); })"/>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code
{
    [Parameter]
    public int ContractId { get; set; }
    
    IEnumerable<ContractPayment> _contractPayments;
    protected override async Task OnInitializedAsync()
    {
        _contractPayments = await Context.ContractPayment.Where(payment => payment.ContractId == ContractId).ToListAsync();
        foreach (var contractPayment in _contractPayments)
        {
            contractPayment.PaymentType = Context.PaymentType.FirstOrDefault(type => type.Id == contractPayment.PaymentId);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
    }

    private void ChangeComment(int contractPaymentId,string changedComment)
    {
        Context.ContractPayment.FirstOrDefault(contractPayment => contractPayment.Id == contractPaymentId).Comment = changedComment;
        Context.SaveChangesAsync();
    }
}

