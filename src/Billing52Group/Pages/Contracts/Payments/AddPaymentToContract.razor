@page "/contracts/{ContractId:int}/payments/add"
@using Billing52Group.Configuration
@using Billing52Group.Models
@using Microsoft.EntityFrameworkCore
@using Billing52Group.Accounting
@inject ApplicationDbContext Context
@inject NavigationManager NavigationManager
@attribute [Authorize]

@if (_paymentTypes != null)
{
    <h3>Create</h3>
    <div class="d-flex justify-content-center">
        <EditForm OnSubmit="@AddPayment" Model="@ContractPayment" class="form-group d-flex flex-column col-sm-3">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <label>
                Sum
                <InputNumber @bind-Value="ContractPayment.Summa" class="form-control" />
            </label>

            <label>
                Comment
                <InputText @bind-Value="ContractPayment.Comment" class="form-control" />
            </label>

            <label>
                Date
                <InputDate @bind-Value="ContractPayment.Date" class="form-control" />
            </label>
            
            <label for="selectedPaymentTypeId">
                Contract group id
                <InputSelect id="selectedPaymentTypeId" @bind-Value="selectedPaymentTypeId" class="form-control">
                    @foreach (var paymentType in _paymentTypes)
                    {
                        <option value="@paymentType.Id">@paymentType.Title</option>
                    }
                </InputSelect>
            </label>

            <input type="submit" class="form-control" />

        </EditForm>
    </div>
}


@code {
    [Parameter]
    public int ContractId { get; set; }
    
    public string selectedPaymentTypeId;
    readonly ContractPayment ContractPayment = new ContractPayment{ Date = DateTime.UtcNow};
    private IEnumerable<PaymentType> _paymentTypes; 
    
    async Task AddPayment(EditContext editContext)
    {
        if (!editContext.Validate()) return;
        int paymentTypeid = selectedPaymentTypeId == null ? 1 : int.Parse(selectedPaymentTypeId);
        ContractPayment.PaymentType = _paymentTypes.FirstOrDefault(type => type.Id ==  paymentTypeid);
        ContractPayment.ContractId = ContractId;
        await Context.AddAsync(ContractPayment);
        await Context.SaveChangesAsync();
        await BalanceUpdater.UpdateBalance(ContractId);
        NavigationManager.NavigateTo($"/contracts/{ContractId}/payments");
    }

    protected override async Task OnInitializedAsync()
    {
        _paymentTypes = await Context.PaymentType.ToListAsync();
    }

}
